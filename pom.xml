<?xml version="1.0" encoding="UTF-8"?>
<!--Maven 作为 Java 项目管理工具，它不仅可以用作包管理，
还有许多的插件，可以支持整个项目的开发、打包、测试及部署等一系列行为。

传统工程我们直按把jar包放置在项目中，
 Maven工程真正的jar包放置在仓库中，项目中只用放置jar包的坐标

 用了 Maven 之后，需要什么包，直接在 pom.xml 中添加几行 xml 代码
 -->





<!--项目为根-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
<!--modelVersion 指定 pom.xml 符合哪个版本的描述符-->
    <modelVersion>4.0.0</modelVersion>
<!--    maven 支持继承功能。子 POM 可以使用 parent 指定父 POM ，然后继承其配置-->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com</groupId>
    <artifactId>vueBlog</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>vueBolg</name>
    <description>vueBolg</description>
<!--属性列表。定义的属性可以在 pom.xml 文件中任意处使用。使用方式为 ${propertie}-->
    <properties>
        <java.version>17</java.version>
    </properties>
    <dependencies>
    <!--依赖项-->
        <!--一般 jar 包被识别为：
groupId: 团体，组织标识符 一般是域名的倒写 一般对应着 java 的包结构
artifactId: 单独项目的唯一标识符（项目名）
version：一个项目的特定版本
（在版本管理时候可以使用几个特殊的字符串 SNAPSHOT、LATEST、RELEASE, SNAPSHOT 表示快照版本，是开发中的版本，LATEST 表示最新版本，RELEASE 表示最终发布的版本）
 这被称为maven坐标 用这三个参数唯一识别一个jar包-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
<!--devtools：项目的热加载重启插件-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <version>8.2.0</version>
            <scope>runtime</scope>
        </dependency>
<!--lombok：简化代码的工具(通过注解)-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!--springboot程序测试依赖，如果是自动创建项目默认添加-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

<!--      mybatis-plus-->
<!--       之后还需要在resource中的application.yml（原后缀properties）中写配置文件-->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>3.4.1</version>
        </dependency>




        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.32</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-freemarker</artifactId>
        </dependency>


        <!--mp代码生成器-->
         <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-generator</artifactId>
            <version>3.4.1</version>
        </dependency>



    </dependencies>
<!--    packaging - 项目的类型，描述了项目打包后的输出，默认是 jar。
常见的输出类型为：pom, jar, maven-plugin, ejb, war, ear, rar, par-->

<!--    构建配置 build-->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
